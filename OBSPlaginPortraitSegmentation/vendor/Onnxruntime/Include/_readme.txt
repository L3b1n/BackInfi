Onnxruntime - функционал для инференса модели (замена фона).
Пакет скачен Леонидом 25.07.2024. Для работы с версией без поддержки Windows 7 необходимо:1.	Скачать архив с репозитория https://github.com/csukuangfj/onnxruntime-libs/releases	Текущая версия onnxruntime-win-x64-static_lib-1.18.1.tar.bz2	и onnxruntime-win-x64-static_lib-Debug-1.18.1.tar.bz2
2.	Исходники скопировать в WinPublic/Onnxruntime только из одного архива.3.	Версию debug переименовать onnxruntime_d.libДля работы с версией с поддержкой Windows 7 необходимо:1.	Разархивировать прикрепленный архив: OnnxruntimeStaticBuild2.	Перейти по ссылке https://github.com/microsoft/onnxruntime/releases,	выбрать необходимую версию (на данный момент 1.18.1) и скачать архив source code (zip).	Разархивировать содержимое в OnnxruntimeStaticBuild в папку onnxruntime		Или		Открыть в терминале OnnxruntimeStaticBuild, прописать	git clone --recursive https://github.com/Microsoft/onnxruntime.git onnxruntime	для установки последней версии или 	git clone --recursive https://github.com/Microsoft/onnxruntime.git onnxruntime	cd onnxruntime	git tag	предоставится список доступных версий, необходимо выбрать и вставить нужную вместо <tag_name> в следующей команде	git checkout <tag_name>	git submodule update --init --recursive4.	Внести изменения в файлы:	a) onnxruntime/onnxruntime/core/platform/windows/env.h		В класс WindowsEnv в private добавить		typedef HANDLE (WINAPI* FnCreateFile2)(			LPCWSTR lpFileName,			DWORD dwDesiredAccess,			DWORD dwShareMode,			DWORD dwCreationDisposition,			LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams		);	b) onnxruntime/onnxruntime/core/platform/windows/env.cc		В функции GetFileLength заменить wil::unique_hfile file_handle{CreateFile2(...)} на		HMODULE module = GetModuleHandleW(L"kernel32.dll");		wil::unique_hfile file_handle;		if (module != NULL) {			auto CreateFile2_ = (FnCreateFile2)GetProcAddress(				module, "CreateFile2");			if (CreateFile2_) {				file_handle = wil::unique_hfile(					CreateFile2_(file_path, FILE_READ_ATTRIBUTES, FILE_SHARE_READ, OPEN_EXISTING, NULL)				);			} else {				file_handle = wil::unique_hfile(					CreateFileW(file_path, FILE_READ_ATTRIBUTES, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)				);			}		}				В функции ReadFileIntoBuffer заменить wil::unique_hfile file_handle{CreateFile2(...)} на		HMODULE module = GetModuleHandleW(L"kernel32.dll");		wil::unique_hfile file_handle;		if (module != NULL) {			auto CreateFile2_ = (FnCreateFile2)GetProcAddress(				module, "CreateFile2");			if (CreateFile2_) {				file_handle = wil::unique_hfile(					CreateFile2_(file_path, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING, NULL)				);			} else {				file_handle = wil::unique_hfile(					CreateFileW(file_path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)				);			}		}				В функции MapFileIntoMemory заменить wil::unique_hfile file_handle{CreateFile2(...)} на		HMODULE module = GetModuleHandleW(L"kernel32.dll");		wil::unique_hfile file_handle;		if (module != NULL) {			auto CreateFile2_ = (FnCreateFile2)GetProcAddress(				module, "CreateFile2");			if (CreateFile2_) {				file_handle = wil::unique_hfile(					CreateFile2_(file_path, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING, NULL)				);			} else {				file_handle = wil::unique_hfile(					CreateFileW(file_path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)				);			}		}				В функции GetCanonicalPath заменить wil::unique_hfile file_handle{CreateFile2(...)} на		HMODULE module = GetModuleHandleW(L"kernel32.dll");		wil::unique_hfile file_handle;		if (module != NULL) {			auto CreateFile2_ = (FnCreateFile2)GetProcAddress(				module, "CreateFile2");			if (CreateFile2_) {				file_handle = wil::unique_hfile(					CreateFile2_(						path.c_str(),						FILE_READ_ATTRIBUTES,						FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,						OPEN_EXISTING,						&param					)				);			} else {				file_handle = wil::unique_hfile(					CreateFileW(						path.c_str(),						FILE_READ_ATTRIBUTES,						FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,						nullptr,						OPEN_EXISTING,						FILE_FLAG_BACKUP_SEMANTICS,						nullptr					)				);			}		}	c) onnxruntime/onnxruntime/core/platform/windows/env_time.cc		Конструктор заменить на такой:		WindowsEnvTime() : GetSystemTimePreciseAsFileTime_(NULL) {			// GetSystemTimePreciseAsFileTime function is only available in			// Windows >= 8. For that reason, we try to look it up in			// kernel32.dll at runtime and use an alternative option if the function			// is not available.			HMODULE module = GetModuleHandleW(L"kernel32.dll");			if (module != NULL) {				auto func = (FnGetSystemTimePreciseAsFileTime)GetProcAddress(					module, "GetSystemTimePreciseAsFileTime");				GetSystemTimePreciseAsFileTime_ = func;			}		}4. Установить в файле ONNXRUNTIME_VERSION версию скаченного onnxruntime5. Установить в файле ./build-static_lib.bat: set CMAKE_BUILD_TYPE=Release и запустить его6. Установить в файле ./build-static_lib.bat: set CMAKE_BUILD_TYPE=Debug и запустить его7. Перенести исходники в WinPublic/Onnxruntime из папки output/static_lib/include8. Либы взять из output/static_lib/lib
Либы:
x64\onnxruntime.lib     (278 266 694 bytes)
x64\onnxruntime_d.lib   (1 832 316 136 bytes)